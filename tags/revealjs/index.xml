<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>revealjs on kolage</title><link>https://jan-kolarik.github.io/tags/revealjs/</link><description>Recent content in revealjs on kolage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jan-kolarik.github.io/tags/revealjs/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating slides with integrated shell</title><link>https://jan-kolarik.github.io/posts/terminal-presentation/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/terminal-presentation/</guid><description>How to setup a seamless interactive console within your presentation</description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>If you are planning to make a presentation including some live command-line
examples, the following article could be useful for you. I&rsquo;d like
to share with you my setup which results in HTML presentation
containing embedded console windows which can run isolated from
your host system.</p>
<hr>
<h2 id="prerequisites">Prerequisites</h2>
<p>Following technologies are used to create the resulting presentation:</p>
<ul>
<li><a href="https://github.com/hakimel/reveal.js">reveal.js</a> - framework for creating HTML presentations</li>
<li><a href="https://github.com/tsl0922/ttyd">ttyd</a> - tool to access Linux shell over HTTP</li>
<li><a href="https://github.com/containers/podman">podman</a> - tool for managing containers</li>
</ul>
<hr>
<h2 id="show-the-code-first">Show the code first</h2>
<h3 id="prepare-the-example">Prepare the example</h3>
<p>Let&rsquo;s say we want to present and describe an example of our source code and
then show the audience how it is being run on the target system using the CLI.</p>
<p>Here we&rsquo;ll use this simple Python snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate the number</span>
</span></span><span style="display:flex;"><span>number <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print the number</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Your lucky number is </span><span style="color:#e6db74">{</span>number<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)
</span></span></code></pre></div><h3 id="insert-it-inside-the-presentation">Insert it inside the presentation</h3>
<p>Suppose we have already configured and running some instance of the reveal.js
presentation, we can insert a section with our code example there:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>            import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Generate the number
</span></span><span style="display:flex;"><span>            number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Print the number
</span></span><span style="display:flex;"><span>            print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><h3 id="stylize-the-snippet">Stylize the snippet</h3>
<p>Now we can play a bit more with the layout. We could change the default <code>font-size</code>
and the <code>width</code> of the code block, so our snippet doesn&rsquo;t contain any scrollbars
and it is better centered within the presentation screen.</p>
<p>By default the reveal.js presentation has configured the highlight.js plugin
for syntax highlighting, so we can define the language of our snippet and apply
the colors by adding the <code>class=&quot;hljs language-python&quot;</code>.</p>
<p>To emphasize only part of the code step by step, we can use the <code>data-line-numbers</code>
attribute where the vertical bar character denotes the transitions, f.e.
<code>&quot;|1|3-4|6-7&quot;</code> means starting with the whole code highlighted, followed by just
line number 1, then lines 3-4 and ending with lines 6-7.</p>
<p>The result could look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">pre</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-size: 18px; width: 60%;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">code</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hljs language-python&#34;</span> <span style="color:#a6e22e">data-line-numbers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;|1|3-4|6-7&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Generate the number
</span></span><span style="display:flex;"><span>            number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Print the number
</span></span><span style="display:flex;"><span>            print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><hr>
<h2 id="add-an-interactive-console">Add an interactive console</h2>
<h3 id="setup-the-web-terminal">Setup the web terminal</h3>
<p>Deploying the shell web server is very simple. When we have downloaded
the ttyd binary, we just provide the port number where the daemon will be listening and
providing the HTTP layer above the console.</p>
<p>Following example will deploy ttyd web server on the port <code>1234</code> and for
every connected client it will create a new process with <code>bash</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> bash
</span></span></code></pre></div><h3 id="integrate-the-console">Integrate the console</h3>
<p>Putting the console into the presentation is as simple as adding new <code>iframe</code>
pointing to our ttyd service at <code>http://localhost:1234/</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:1234/&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</span></span></code></pre></div><h3 id="tuning-the-visual">Tuning the visual</h3>
<p>Now to create a seamless transition between the code snippet and the
console window we need to add a bit more configuration.</p>
<p>We can setup a custom font size and also change the colors for ttyd
console like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> -t fontSize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span> -t <span style="color:#e6db74">&#39;theme={&#34;background&#34;: &#34;white&#34;, &#34;foreground&#34;: &#34;black&#34;}&#39;</span> bash
</span></span></code></pre></div><p>In reveal.js we will stack the console frame window on the top of the code snippet
while keeping it invisible until the snippet code slides are fully traversed.
This could be done by including the both frames inside the parent <code>div</code> having the
<code>r-stack</code> class and showing the console at the right moment by adding the <code>fragment</code>
class to the console <code>iframe</code>.</p>
<p>In the end we can change the console frame size to match the code snippet.</p>
<p>One hack that could be handy <strong>when we don&rsquo;t want to show the vertical scrollbar</strong>
inside the console frame, but still keeping the scrolling functionality. In this case
we can wrap the console in the <code>div</code> which will match the size of the code example frame,
but we stretch the width of the actual <code>iframe</code> a bit, so the scrollbar is hidden. This
also needs to setup <code>overflow: hidden;</code> in the wrapping <code>div</code>.</p>
<p>So the result could look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;r-stack&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">pre</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;code&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">code</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hljs language-python&#34;</span> <span style="color:#a6e22e">data-trim</span> <span style="color:#a6e22e">data-line-numbers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;|1|3-4|6-7&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                # Generate the number
</span></span><span style="display:flex;"><span>                number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                # Print the number
</span></span><span style="display:flex;"><span>                print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cli-wrapper&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cli&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fragment fade-up&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:1234/&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><p>And the CSS now moved into it&rsquo;s own stylesheet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>#code {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">18</span><span style="color:#66d9ef">px</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>#cli-wrapper {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">overflow</span>: <span style="color:#66d9ef">hidden</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>#cli {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">103</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">103</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Note:</strong> I am definitely not a CSS guy, so please don&rsquo;t blame me if you find
anything ridiculous about the mentioned code. But, it should work 😇</p>
<p>This is the final output when running the presentation in the web browser:</p>
<video class="video-shortcode" style="max-width: 100%; height: auto;" preload="" controls>
    <source src="/posts/videos/revealjs-ttyd.webm" type="">
    There should have been a video here but your browser does not seem
    to support it.
</video>
<hr>
<h2 id="using-containers">Using containers</h2>
<p>When doing more examples in the presentation it might be useful to always have
an isolated environment for each demo.</p>
<p>This can be done easily by using the podman containers. We can deploy a
container from the public image, do some customizations, prepare our demo
environment and then serialize the state of the container. Then we can setup
ttyd to run a clean container from this image every time client requests new
console.</p>
<p>So if we use the Fedora Linux as an example, we can download the
latest Fedora container image and get inside that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman pull fedora
</span></span><span style="display:flex;"><span>podman run -it fedora
</span></span></code></pre></div><p>It will redirect us inside the container terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>root@fdee00b17d43 /<span style="color:#f92672">]</span><span style="color:#75715e"># </span>
</span></span></code></pre></div><p>Now prepare the environment needed for the demo, like installing dependencies,
copying the example scripts into the container etc.</p>
<p>When everything is ready, we can export the container from another shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman container export fdee00b17d43 &gt; container.tar
</span></span></code></pre></div><p>Then we can import it in the image registry on local or any other computer and
tagging it with <code>example-container</code> name by doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman image import container.tar example-container
</span></span></code></pre></div><p>Finally we will prepare the ttyd daemon to spawn a new container for us
on each attach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> podman run -it example-container /bin/bash
</span></span></code></pre></div><p>We can also change the container&rsquo;s hostname with <code>-h my-hostname</code>, so
the shell on the live demo will not show the ugly auto-generated id.</p>
<p>And of course we can prepare many containers running on different ports
with various font sizes, configuration, etc.</p>
<p><strong>Note:</strong> each time client connects to the ttyd, new container is created.
This also means when the page having the embedded terminal is refreshed.
Therefore it may be desirable to cleanup all the related containers
after the presentation is done:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman container rm --filter ancestor<span style="color:#f92672">=</span>localhost/example-container
</span></span></code></pre></div><hr>
]]></content:encoded></item></channel></rss>