[{"content":"Intro If you are planning to make a presentation including some live command-line examples, the following article could be useful for you. I\u0026rsquo;d like to share with you my setup which results in HTML presentation containing embedded console windows which can run isolated from your host system.\nPrerequisites Following technologies are used to create the resulting presentation:\nreveal.js - framework for creating HTML presentations ttyd - tool to access Linux shell over HTTP podman - tool for managing containers Show the code first Prepare the example Let\u0026rsquo;s say you want to present and describe an example of your source code and then show the audience how it is being run on the target system using the CLI.\nHere we\u0026rsquo;ll use this simple Python snippet:\nimport random # Generate the number number = random.randint(1, 100) # Print the number print(f\u0026#39;Your lucky number is {number}.\u0026#39;) Insert it inside the presentation Suppose you have already configured and running some instance of the reveal.js presentation, we can insert a section with our code example there:\n\u0026lt;section\u0026gt; \u0026lt;h4\u0026gt;Python demo\u0026lt;/h4\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; import random # Generate the number number = random.randint(1, 100) # Print the number print(f\u0026#39;Your lucky number is {number}.\u0026#39;) \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/section\u0026gt; Stylize the snippet Now we can play a bit more with the layout. We could change the default font-size and the width of the code block, so our snippet doesn\u0026rsquo;t contain any scrollbars and it is better centered within the presentation screen.\nBy default the reveal.js presentation has configured the highlight.js plugin for syntax highlighting, so we can define the language of our snippet and apply the colors by adding the class=\u0026quot;hljs language-python\u0026quot;.\nTo emphasize only part of the code step by step, we can use the data-line-numbers attribute where the vertical bar character denotes the transitions, f.e. \u0026quot;|1|3-4|6-7\u0026quot; means starting with the whole code highlighted, followed by just line number 1, then lines 3-4 and ending with lines 6-7.\nThe result could look like this:\n\u0026lt;section\u0026gt; \u0026lt;h4\u0026gt;Python demo\u0026lt;/h4\u0026gt; \u0026lt;pre style=\u0026#34;font-size: 18px; width: 60%;\u0026#34;\u0026gt; \u0026lt;code class=\u0026#34;hljs language-python\u0026#34; data-line-numbers=\u0026#34;|1|3-4|6-7\u0026#34;\u0026gt; import random # Generate the number number = random.randint(1, 100) # Print the number print(f\u0026#39;Your lucky number is {number}.\u0026#39;) \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/section\u0026gt; Add an interactive console Setup the web terminal Deploying the shell web server is very simple. When you have downloaded the ttyd binary, you just provide the port number where the daemon will be listening and providing the HTTP layer above the console.\nFollowing example will deploy ttyd web server on the port 1234 and for every connected client it will create a new process with bash:\n./ttyd -p 1234 bash Integrate the console Putting the console into the presentation is as simple as adding new iframe pointing to our ttyd service at http://localhost:1234/:\n\u0026lt;iframe src=\u0026#34;http://localhost:1234/\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; Tuning the visual Now to create a seamless transition between the code snippet and the console window we need to add a bit more configuration.\nWe can setup a custom font size and also change the colors for ttyd console like this:\n./ttyd -p 1234 -t fontSize=12 -t \u0026#39;theme={\u0026#34;background\u0026#34;: \u0026#34;white\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;black\u0026#34;}\u0026#39; bash In reveal.js we will stack the console frame window on the top of the code snippet while keeping it invisible until the snippet code slides are fully traversed. This could be done by including the both frames inside the parent div having the r-stack class and showing the console at the right moment by adding the fragment class to the console iframe.\nIn the end we can change the console frame size to match the code snippet.\nOne hack that could be handy when you don\u0026rsquo;t want to show the vertical scrollbar inside the console frame, but still keeping the scrolling functionality. In this case we can wrap the console in the div which will match the size of the code example frame, but we stretch the width of the actual iframe a bit, so the scrollbar is hidden. This also needs to setup overflow: hidden; in the wrapping div.\nSo the result could look like this:\n\u0026lt;section\u0026gt; \u0026lt;h4\u0026gt;Python demo\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;r-stack\u0026#34;\u0026gt; \u0026lt;pre id=\u0026#34;code\u0026#34;\u0026gt; \u0026lt;code class=\u0026#34;hljs language-python\u0026#34; data-trim data-line-numbers=\u0026#34;|1|3-4|6-7\u0026#34;\u0026gt; import random # Generate the number number = random.randint(1, 100) # Print the number print(f\u0026#39;Your lucky number is {number}.\u0026#39;) \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;div id=\u0026#34;cli-wrapper\u0026#34;\u0026gt; \u0026lt;iframe id=\u0026#34;cli\u0026#34; class=\u0026#34;fragment fade-up\u0026#34; src=\u0026#34;http://localhost:1234/\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; And the CSS now moved into it\u0026rsquo;s own stylesheet:\n#code { font-size: 18px; width: 60%; } #cli-wrapper { max-width: 60%; width: 60%; max-height: 100%; height: 100%; overflow: hidden; } #cli { max-width: 103%; width: 103%; max-height: 100%; height: 100%; } Note: I am definitely not a CSS guy, so please don\u0026rsquo;t blame me if you find anything ridiculous about the mentioned code. But, it should work ðŸ˜‡\nThis is the final output when running the presentation in the web browser:\nThere should have been a video here but your browser does not seem to support it. Using containers When doing more examples in the presentation it might be useful to always have an isolated environment for each demo.\nThis can be done easily by using the podman containers. We can deploy a container from the public image, do some customizations, prepare our demo environment and then serialize the state of the container. Then we can setup ttyd to run a clean container from this image every time client requests new console.\nSo if we use the Fedora Linux as an example, we can download the latest Fedora container image and get inside that:\npodman pull fedora podman run -it fedora It will redirect you inside the container terminal:\n[root@fdee00b17d43 /]# Now prepare the environment needed for the demo, like installing dependencies, copying the example scripts into the container etc.\nWhen everything is ready, we can export the container from another shell:\npodman container export fdee00b17d43 \u0026gt; container.tar Then we can import it in the image registry on local or any other computer and tagging it with example-container name by doing:\npodman image import container.tar example-container Finally we will prepare the ttyd daemon to spawn a new container for us on each attach:\n./ttyd -p 1234 podman run -it example-container /bin/bash We can also change the container\u0026rsquo;s hostname with -h my-hostname, so the shell on the live demo will not show the ugly auto-generated id.\nAnd of course we can prepare many containers running on different ports with various font sizes, configuration, etc.\nNote: each time client connects to the ttyd, new container is created. This also means when the page having the embedded terminal is refreshed. Therefore it may be desirable to cleanup all the related containers after the presentation is done:\npodman container rm --filter ancestor=localhost/example-container ","permalink":"https://jan-kolarik.github.io/posts/terminal-presentation/","summary":"How to setup seamless interactive console within your presentation","title":"Creating slides with integrated shell"},{"content":"My name is Jan KolÃ¡rik and I\u0026rsquo;m a software engineer currently working in Red Hat.\nI first discovered Linux when I was 14 years old and a few years later I started using it as my main operating system.\nRecently, I\u0026rsquo;ve entered the world of open source as a developer, which has been my dream for a long time.\nI have experience mainly with C++, C# and Python languages and I love applying test-driven development principles in my projects wherever it\u0026rsquo;s possible. Currently I am also discovering the beauties of Rust.\n","permalink":"https://jan-kolarik.github.io/about/","summary":"About me","title":"About"},{"content":" Last weekend I\u0026rsquo;ve attended FOSDEM 2023 conference with my colleagues from the Red Hat RPM software management team. We gave a talk about the DNF5 package manager which will be the new default in Fedora Linux soon.\nIt was the first time for me speaking in public at such a huge event and it was really exciting. This whole meetup was very energizing. Lot of different positive vibes from various tracks. I hope I\u0026rsquo;ll make it there again next year.\nIf you are more interested, you can visit this link and see a recording of our presentation or any other talk from the conference.\n","permalink":"https://jan-kolarik.github.io/posts/dnf5-fosdem2023/","summary":"Presenting the upcoming Fedora Linux package manager in Brussels","title":"DNF5 at FOSDEM"}]