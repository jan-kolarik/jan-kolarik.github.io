<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on kolage</title><link>https://jan-kolarik.github.io/posts/</link><description>Recent content in Posts on kolage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jan-kolarik.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>TDD talk at QEcamp23</title><link>https://jan-kolarik.github.io/posts/tdd-qecamp23/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/tdd-qecamp23/</guid><description>An introductory presentation about test-driven development</description><content:encoded><![CDATA[<p>Three weeks ago, I presented at our internal Red Hat event, QEcamp. This event serves as a platform for discussing all aspects related to quality and testing. What makes it exceptional is its inclusivity â€” it brings together not just quality engineers but associates from various departments, fostering discussions around the topic of quality.</p>
<p>My contribution included an overview presentation on test-driven development, where I shared the basics and my experience with this alternative approach to the conventional development process. You can view the video recording <a href="https://www.youtube.com/watch?v=EXgurtT_BZg">here</a> if you are interested. HTML slides are available <a href="https://jan-kolarik.github.io/tdd-qecamp23">here</a>.</p>
]]></content:encoded></item><item><title>Using DNF5 API after running a transaction</title><link>https://jan-kolarik.github.io/posts/dnf5-api-after-transaction/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/dnf5-api-after-transaction/</guid><description>What happens to the existing sack and how to deal with that</description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>A common use case for DNF5 API is installing packages, which is quite
straightfoward.</p>
<p>First, we need to create a <code>Base</code>, the core object that holds a runtime
environment. We load its configuration from the system and run the <code>setup</code>
method to prepare the environment.</p>
<p>Next, we can prepare a repository sack, which holds information about
configured repositories and the state of local and remote packages, while
potentially refreshing metadata from remote servers if needed.</p>
<p>With the setup complete, we can tell DNF5 what we want to do, in this case,
install our package. This is done by configuring the <code>Goal</code> object.</p>
<p>After defining our intention, we can proceed to calculate the transaction,
determining the necessary actions to achieve our goal. Finally, we can perform
the resulting action, which is downloading and installing the packages.</p>
<p>An example Python script that accomplishes this might look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libdnf5
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> libdnf5<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>Base()
</span></span><span style="display:flex;"><span>base<span style="color:#f92672">.</span>load_config_from_file()
</span></span><span style="display:flex;"><span>base<span style="color:#f92672">.</span>setup()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sack <span style="color:#f92672">=</span> base<span style="color:#f92672">.</span>get_repo_sack()
</span></span><span style="display:flex;"><span>sack<span style="color:#f92672">.</span>create_repos_from_system_configuration()
</span></span><span style="display:flex;"><span>sack<span style="color:#f92672">.</span>update_and_load_enabled_repos(<span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>goal <span style="color:#f92672">=</span> libdnf5<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>Goal(base)
</span></span><span style="display:flex;"><span>goal<span style="color:#f92672">.</span>add_install(<span style="color:#e6db74">&#39;my-awesome-package&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>transaction <span style="color:#f92672">=</span> goal<span style="color:#f92672">.</span>resolve()
</span></span><span style="display:flex;"><span>transaction<span style="color:#f92672">.</span>download()
</span></span><span style="display:flex;"><span>transaction<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>After this point, if everything went well, the package should be successfully installed
on the system.</p>
<p>What could be tricky is when trying to use the API after the transaction. The problem is that
the existing repository sack does not reflect the updated state after the transaction was
executed. This is because managing that state with connected third-party libraries would be
very difficult.</p>
<hr>
<h2 id="use-information-from-the-transaction-object">Use information from the Transaction object</h2>
<p>If you only need to query information about the post-transaction state, you can use the data
provided by the <code>Transaction</code> object.</p>
<p>The <code>get_transaction_packages()</code> method can be particularly useful for this purpose. It allows
us to query which packages were involved in the transaction, the specific actions taken with
these packages, and any packages they may have been replaced with.</p>
<p>For example, let&rsquo;s say we want to retrieve a list of new files that were installed during the
transaction. In this case, we&rsquo;ll need to pre-load the filelists metadata in DNF5 before loading
the repository sack. We can do this by adding the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>base<span style="color:#f92672">.</span>get_config()<span style="color:#f92672">.</span>get_optional_metadata_types_option()<span style="color:#f92672">.</span>add_item(<span style="color:#e6db74">&#39;filelists&#39;</span>)
</span></span></code></pre></div><p>Then, you can use the helper function <code>transaction_item_action_is_inbound</code> to filter only
inbound packages from the transaction. Finally, you can query the package files contained
in the transaction:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>newly_installed_files <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> transaction_package <span style="color:#f92672">in</span> transaction<span style="color:#f92672">.</span>get_transaction_packages():
</span></span><span style="display:flex;"><span>    action <span style="color:#f92672">=</span> transaction_package<span style="color:#f92672">.</span>get_action()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> libdnf5<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>transaction<span style="color:#f92672">.</span>transaction_item_action_is_inbound(action):
</span></span><span style="display:flex;"><span>        package_files <span style="color:#f92672">=</span> transaction_package<span style="color:#f92672">.</span>get_package()<span style="color:#f92672">.</span>get_files()
</span></span><span style="display:flex;"><span>        newly_installed_files <span style="color:#f92672">|=</span> set(package_files)
</span></span></code></pre></div><hr>
<h2 id="start-with-a-new-base">Start with a new Base</h2>
<p>The easiest and most robust way is probably to create a new <code>Base</code> each time
we need a fresh state. Although some work is done repeatedly, there is no
additional unnecessary network trafic as the metadata is already refreshed
during the first attempt. This approach allows us to perform any task as if
we were executing a new separate script for each one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libdnf5
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_base</span>():
</span></span><span style="display:flex;"><span>    base <span style="color:#f92672">=</span> libdnf5<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>Base()
</span></span><span style="display:flex;"><span>    base<span style="color:#f92672">.</span>load_config_from_file()
</span></span><span style="display:flex;"><span>    base<span style="color:#f92672">.</span>setup()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sack <span style="color:#f92672">=</span> base<span style="color:#f92672">.</span>get_repo_sack()
</span></span><span style="display:flex;"><span>    sack<span style="color:#f92672">.</span>create_repos_from_system_configuration()
</span></span><span style="display:flex;"><span>    sack<span style="color:#f92672">.</span>update_and_load_enabled_repos(<span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> base
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">install_package</span>(spec):
</span></span><span style="display:flex;"><span>    base <span style="color:#f92672">=</span> create_base()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    goal <span style="color:#f92672">=</span> libdnf5<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>Goal(base)
</span></span><span style="display:flex;"><span>    goal<span style="color:#f92672">.</span>add_install(spec)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    transaction <span style="color:#f92672">=</span> goal<span style="color:#f92672">.</span>resolve()
</span></span><span style="display:flex;"><span>    transaction<span style="color:#f92672">.</span>download()
</span></span><span style="display:flex;"><span>    transaction<span style="color:#f92672">.</span>run()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">query_installed</span>():
</span></span><span style="display:flex;"><span>    base <span style="color:#f92672">=</span> create_base()
</span></span><span style="display:flex;"><span>    query <span style="color:#f92672">=</span> libdnf5<span style="color:#f92672">.</span>rpm<span style="color:#f92672">.</span>PackageQuery(base)
</span></span><span style="display:flex;"><span>    query<span style="color:#f92672">.</span>filter_installed()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [package<span style="color:#f92672">.</span>get_nevra() <span style="color:#66d9ef">for</span> package <span style="color:#f92672">in</span> query]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>install_package(<span style="color:#e6db74">&#39;my-awesome-package&#39;</span>)
</span></span><span style="display:flex;"><span>print(query_installed())
</span></span></code></pre></div><hr>
<h2 id="use-the-rpm-api">Use the RPM API</h2>
<p>Another alternative is to use the underlying RPM API. This should be the most
effective way for querying information about installed packages, as we are directly
reading the data from the SQLite database:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> rpm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prepare the transaction set while ignoring package signatures verification</span>
</span></span><span style="display:flex;"><span>transaction_set <span style="color:#f92672">=</span> rpm<span style="color:#f92672">.</span>TransactionSet()
</span></span><span style="display:flex;"><span>transaction_set<span style="color:#f92672">.</span>setVSFlags(rpm<span style="color:#f92672">.</span>_RPMVSF_NOSIGNATURES)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find the newest package in the database</span>
</span></span><span style="display:flex;"><span>last_package <span style="color:#f92672">=</span> max(transaction_set<span style="color:#f92672">.</span>dbMatch(), 
</span></span><span style="display:flex;"><span>                   key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> package: package[rpm<span style="color:#f92672">.</span>RPMTAG_INSTALLTIME])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get packages only related to the latest transaction</span>
</span></span><span style="display:flex;"><span>last_packages <span style="color:#f92672">=</span> transaction_set<span style="color:#f92672">.</span>dbMatch(rpm<span style="color:#f92672">.</span>RPMTAG_INSTALLTID, 
</span></span><span style="display:flex;"><span>                                        last_package[rpm<span style="color:#f92672">.</span>RPMTAG_INSTALLTID])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Aggregate all related files</span>
</span></span><span style="display:flex;"><span>files <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> package <span style="color:#f92672">in</span> last_packages:
</span></span><span style="display:flex;"><span>    files <span style="color:#f92672">|=</span> set(package[rpm<span style="color:#f92672">.</span>RPMTAG_FILENAMES])
</span></span></code></pre></div><hr>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/rpm-software-management/dnf5">DNF5 upstream</a></li>
<li><a href="https://github.com/rpm-software-management/rpm">RPM upstream</a></li>
</ul>
]]></content:encoded></item><item><title>Debugging Arduino without additional hardware</title><link>https://jan-kolarik.github.io/posts/atmega-debug-linux/</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/atmega-debug-linux/</guid><description>Using Visual Studio Code to debug programs for Arduino Mega 2560</description><content:encoded><![CDATA[<p><img loading="lazy" src="/posts/images/arduino-logo.png" alt="arduino-logo"  title="Arduino logo"  />
</p>
<h2 id="intro">Intro</h2>
<p>On a bit different note, recently I was trying to help my father with adding
debugging support for Arduino Mega 2560 microcontroller board without need
to use any additional hardware kit.</p>
<p>For Windows, there is a great <a href="https://www.codeproject.com/Articles/5150391/Creating-and-Debugging-Arduino-Programs-in-Visual">tutorial</a> for that, but we need to setup several things differently in the Linux environment
and I didn&rsquo;t find any easy-to-use guide for that.</p>
<p>So I want to share my approach with you, definitely nothing world-shattering, but could be useful for anyone with
similar intention or might save you some time from being stuck in one place for too long.</p>
<hr>
<h2 id="environment">Environment</h2>
<ul>
<li>Fedora Linux (but should be applicable to any other distro)</li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a> + Arduino extension</li>
<li><a href="https://github.com/arduino/arduino-cli">Arduino CLI</a></li>
<li><a href="https://github.com/jdolinay/avr_debug">avr_debug</a></li>
</ul>
<hr>
<h2 id="building-and-uploading">Building and uploading</h2>
<p>First we need to setup the building of our project and make it possible
to upload the binary into the board.</p>
<h3 id="prepare-vs-code">Prepare VS Code</h3>
<p>Install the <strong>Arduino CLI</strong> tool to provide an all-in-one solution for
Arduino boards.</p>
<p>Then we need to install &amp; enable the <strong>Arduino</strong> extension in the VS Code.
In the extension&rsquo;s configuration we need to modify some fields:</p>
<ul>
<li>Arduino: Command Path (<code>arduino.commandPath</code>) &ndash; set <code>arduino-cli</code></li>
<li>Arduino: Path (<code>arduino.path</code>) &ndash; set <code>/path/to/your/arduino-cli/binary</code></li>
<li>Arduino: Use Arduino Cli (<code>arduino.useArduinoCli</code>) &ndash; set <code>true</code></li>
</ul>
<p>Initialize the Arduino project with the <strong>Arduino: Initialize</strong> command, f.e.
by selecting it from the command palette using the <strong>F1</strong> key in VS Code.
This will generate the empty <code>.ino</code> source file and the default <code>arduino.json</code>
extension config for our project in the <code>.vscode</code> folder. You will also need to <strong>rename</strong>
this existing <code>.ino</code> file to match the name of the project.</p>
<p>Open the <strong>Arduino: Board Manager</strong> command and install the <strong>Arduino AVR Boards</strong>
package to add support for our microcontroller board.</p>
<p>Using the bottom status bar in VS Code, select the <strong>Arduino Mega</strong> board type.</p>
<p>Now you can try to compile the empty project using the <strong>Arduino: Verify</strong>
command which is also available under the icon in the editor&rsquo;s top bar.</p>
<h3 id="deploy-a-simple-program">Deploy a simple program</h3>
<p>To be able to upload our program to the actual board, it might be needed
to add appropriate user rights by adding the current user to the
<code>dialout</code> or <code>tty</code> group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo usermod -a -G dialout $USER
</span></span></code></pre></div><p>It will need a logout or restart.</p>
<p>Connect the board to the USB and select the <code>/dev/ttyUSB0</code> port
from the bottom status bar.</p>
<p>We should be able now to upload the program to the board with the
<strong>Arduino: Upload</strong> command.</p>
<p>To see if it is really working you can add some simple blinking
to the <code>.ino</code> source:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pinMode</span>(LED_BUILTIN, OUTPUT);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">digitalWrite</span>(LED_BUILTIN, HIGH);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">delay</span>(<span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">digitalWrite</span>(LED_BUILTIN, LOW);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">delay</span>(<span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<h2 id="debugging">Debugging</h2>
<p>Here we&rsquo;ll add support for debugging our board from the VS Code
using just the connected USB cable.</p>
<h3 id="setup-the-debugger">Setup the debugger</h3>
<p>We will prepare the <strong>GDB</strong> debugger that will be running on our
local computer and the <strong>avr_debug</strong>, remote stub which will be
deployed to the ATMega and communicating with the <strong>GDB</strong> to
allow debugging from VS Code.</p>
<p>Unfortunately, for Fedora Linux, there is no maintained package
with <strong>GDB</strong> for <strong>AVR</strong> architectures anymore, therefore we need to
build it by ourselves. Luckily it&rsquo;s very simple.</p>
<p>Download the latest <strong>GDB</strong> <a href="https://www.sourceware.org/gdb/download/">sources</a>,
compile it for target <strong>AVR</strong> architecture and install it in the defined
directory like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./configure --target<span style="color:#f92672">=</span>avr --prefix<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/Programs/avr-gdb
</span></span><span style="display:flex;"><span>make
</span></span><span style="display:flex;"><span>make install
</span></span></code></pre></div><p>Then unpack the <strong>avr_debug</strong> library into the Arduino user libraries
directory at <code>${HOME}/Arduino/libraries/avr-debugger</code>. Put there just the
library <a href="https://github.com/jdolinay/avr_debug/tree/master/arduino/library/avr-debugger">sub-directory</a>
from the default branch.</p>
<h3 id="configure-the-project">Configure the project</h3>
<p>Include the debugging library into our project by going to the
<strong>Arduino: Library Manager</strong>, filtering the <code>avr-debugger</code> and
clicking the <strong>Include Library</strong> button.</p>
<p>Now we have the sources prepared for adding the debugging support
which is as simple as adding the <code>debug_init()</code> function at the
beginning of the <code>setup()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;app_api.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;avr_debugger.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;avr8-stub.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">debug_init</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pinMode</span>(LED_BUILTIN, OUTPUT);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">digitalWrite</span>(LED_BUILTIN, HIGH);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">delay</span>(<span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">digitalWrite</span>(LED_BUILTIN, LOW);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">delay</span>(<span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Last thing we need to do is to create a debugging configuration
for VS Code, so it knows what we want to debug and how.</p>
<p>I am sharing my <code>launch.json</code> example below. The key parts there:</p>
<ul>
<li><code>program</code> points to our built program which is the <code>.elf</code> binary in the <code>build</code> folder</li>
<li><code>miDebuggerPath</code> addresses the <strong>AVR GDB</strong> binary we have built</li>
<li><code>setupCommands</code> section tells <strong>GDB</strong> what port and baud rate to use</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;0.2.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;configurations&#34;</span>: [
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Debugger launch&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;cppdbg&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;request&#34;</span>: <span style="color:#e6db74">&#34;launch&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;program&#34;</span>: <span style="color:#e6db74">&#34;${workspaceFolder}/build/example.ino.elf&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;cwd&#34;</span>: <span style="color:#e6db74">&#34;${workspaceFolder}&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;externalConsole&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;MIMode&#34;</span>: <span style="color:#e6db74">&#34;gdb&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;miDebuggerPath&#34;</span>: <span style="color:#e6db74">&#34;${userHome}/Programs/avr-gdb/bin/avr-gdb&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">&#34;setupCommands&#34;</span>: [
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Set remote serial baud&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;set serial baud 115200&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;ignoreFailures&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>                },
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Attach to serial port&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;target remote /dev/ttyUSB0&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&#34;ignoreFailures&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            ]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can put it in the <code>.vscode</code> subfolder and modify it according to
your environment.</p>
<h3 id="lets-add-some-breakpoints">Let&rsquo;s add some breakpoints!</h3>
<p>And so now we can verify and upload our program and then debug
the running program in VS Code as with any other project. Just
setup the breakpoints and then attach to the board using the
<strong>Run and Debug</strong> from the Activity Bar.</p>
<p><strong>Note:</strong> there is one important downside of this approach and
it&rsquo;s that no <code>Serial</code> functions could be used when the debugging stub
is attached. You could use the conditional compilation to
enable them when not debugging. For more info, refer to the
upstream project of the <strong>avr_debug</strong> author.</p>
<hr>
]]></content:encoded></item><item><title>Creating slides with integrated shell</title><link>https://jan-kolarik.github.io/posts/terminal-presentation/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/terminal-presentation/</guid><description>How to setup a seamless interactive console within your presentation</description><content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>If you are planning to make a presentation including some live command-line
examples, the following article could be useful for you.</p>
<p>I&rsquo;d like to share with you my setup which results in HTML presentation
containing embedded console windows which can run isolated from
your host system.</p>
<hr>
<h2 id="prerequisites">Prerequisites</h2>
<p>Following technologies are used to create the resulting presentation:</p>
<ul>
<li><a href="https://github.com/hakimel/reveal.js">reveal.js</a> - framework for creating HTML presentations</li>
<li><a href="https://github.com/tsl0922/ttyd">ttyd</a> - tool to access Linux shell over HTTP</li>
<li><a href="https://github.com/containers/podman">podman</a> - tool for managing containers</li>
</ul>
<hr>
<h2 id="show-the-code-first">Show the code first</h2>
<h3 id="prepare-the-example">Prepare the example</h3>
<p>Let&rsquo;s say we want to present and describe an example of our source code and
then show the audience how it is being run on the target system using the CLI.</p>
<p>Here we&rsquo;ll use this simple Python snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Generate the number</span>
</span></span><span style="display:flex;"><span>number <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print the number</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Your lucky number is </span><span style="color:#e6db74">{</span>number<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)
</span></span></code></pre></div><h3 id="insert-it-inside-the-presentation">Insert it inside the presentation</h3>
<p>Suppose we have already configured and running some instance of the reveal.js
presentation, we can insert a section with our code example there:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>            import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Generate the number
</span></span><span style="display:flex;"><span>            number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Print the number
</span></span><span style="display:flex;"><span>            print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><h3 id="stylize-the-snippet">Stylize the snippet</h3>
<p>Now we can play a bit more with the layout. We could change the default <code>font-size</code>
and the <code>width</code> of the code block, so our snippet doesn&rsquo;t contain any scrollbars
and it is better centered within the presentation screen.</p>
<p>By default the reveal.js presentation has configured the highlight.js plugin
for syntax highlighting, so we can define the language of our snippet and apply
the colors by adding the <code>class=&quot;hljs language-python&quot;</code>.</p>
<p>To emphasize only part of the code step by step, we can use the <code>data-line-numbers</code>
attribute where the vertical bar character denotes the transitions, f.e.
<code>&quot;|1|3-4|6-7&quot;</code> means starting with the whole code highlighted, followed by just
line number 1, then lines 3-4 and ending with lines 6-7.</p>
<p>The result could look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">pre</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;font-size: 18px; width: 60%;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">code</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hljs language-python&#34;</span> <span style="color:#a6e22e">data-line-numbers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;|1|3-4|6-7&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Generate the number
</span></span><span style="display:flex;"><span>            number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            # Print the number
</span></span><span style="display:flex;"><span>            print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><hr>
<h2 id="add-an-interactive-console">Add an interactive console</h2>
<h3 id="setup-the-web-terminal">Setup the web terminal</h3>
<p>Deploying the shell web server is very simple. When we have downloaded
the ttyd binary, we just provide the port number where the daemon will be listening and
providing the HTTP layer above the console.</p>
<p>Following example will deploy ttyd web server on the port <code>1234</code> and for
every connected client it will create a new process with <code>bash</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> bash
</span></span></code></pre></div><h3 id="integrate-the-console">Integrate the console</h3>
<p>Putting the console into the presentation is as simple as adding new <code>iframe</code>
pointing to our ttyd service at <code>http://localhost:1234/</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:1234/&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</span></span></code></pre></div><h3 id="tuning-the-visual">Tuning the visual</h3>
<p>Now to create a seamless transition between the code snippet and the
console window we need to add a bit more configuration.</p>
<p>We can setup a custom font size and also change the colors for ttyd
console like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> -t fontSize<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span> -t <span style="color:#e6db74">&#39;theme={&#34;background&#34;: &#34;white&#34;, &#34;foreground&#34;: &#34;black&#34;}&#39;</span> bash
</span></span></code></pre></div><p>In reveal.js we will stack the console frame window on the top of the code snippet
while keeping it invisible until the snippet code slides are fully traversed.
This could be done by including the both frames inside the parent <code>div</code> having the
<code>r-stack</code> class and showing the console at the right moment by adding the <code>fragment</code>
class to the console <code>iframe</code>.</p>
<p>In the end we can change the console frame size to match the code snippet.</p>
<p>One hack that could be handy <strong>when we don&rsquo;t want to show the vertical scrollbar</strong>
inside the console frame, but still keeping the scrolling functionality. In this case
we can wrap the console in the <code>div</code> which will match the size of the code example frame,
but we stretch the width of the actual <code>iframe</code> a bit, so the scrollbar is hidden. This
also needs to setup <code>overflow: hidden;</code> in the wrapping <code>div</code>.</p>
<p>So the result could look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h4</span>&gt;Python demo&lt;/<span style="color:#f92672">h4</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;r-stack&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">pre</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;code&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">code</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hljs language-python&#34;</span> <span style="color:#a6e22e">data-trim</span> <span style="color:#a6e22e">data-line-numbers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;|1|3-4|6-7&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                import random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                # Generate the number
</span></span><span style="display:flex;"><span>                number = random.randint(1, 100)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                # Print the number
</span></span><span style="display:flex;"><span>                print(f&#39;Your lucky number is {number}.&#39;)
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">code</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">pre</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cli-wrapper&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cli&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fragment fade-up&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:1234/&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><p>And the CSS now moved into it&rsquo;s own stylesheet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>#code {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>: <span style="color:#ae81ff">18</span><span style="color:#66d9ef">px</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>#cli-wrapper {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">60</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">overflow</span>: <span style="color:#66d9ef">hidden</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>#cli {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>: <span style="color:#ae81ff">103</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">103</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Note:</strong> I am definitely not a CSS guy, so please don&rsquo;t blame me if you find
anything ridiculous about the mentioned code. But, it should work ðŸ˜‡</p>
<p>This is the final output when running the presentation in the web browser:</p>
<video class="video-shortcode" style="max-width: 100%; height: auto;" preload="" controls>
    <source src="/posts/videos/revealjs-ttyd.webm" type="">
    There should have been a video here but your browser does not seem
    to support it.
</video>
<hr>
<h2 id="using-containers">Using containers</h2>
<p>When doing more examples in the presentation it might be useful to always have
an isolated environment for each demo.</p>
<p>This can be done easily by using the podman containers. We can deploy a
container from the public image, do some customizations, prepare our demo
environment and then serialize the state of the container. Then we can setup
ttyd to run a clean container from this image every time client requests new
console.</p>
<p>So if we use the Fedora Linux as an example, we can download the
latest Fedora container image and get inside that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman pull fedora
</span></span><span style="display:flex;"><span>podman run -it fedora
</span></span></code></pre></div><p>It will redirect us inside the container terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>root@fdee00b17d43 /<span style="color:#f92672">]</span><span style="color:#75715e"># </span>
</span></span></code></pre></div><p>Now prepare the environment needed for the demo, like installing dependencies,
copying the example scripts into the container etc.</p>
<p>When everything is ready, we can export the container from another shell:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman container export fdee00b17d43 &gt; container.tar
</span></span></code></pre></div><p>Then we can import it in the image registry on local or any other computer and
tagging it with <code>example-container</code> name by doing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman image import container.tar example-container
</span></span></code></pre></div><p>Finally we will prepare the ttyd daemon to spawn a new container for us
on each attach:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ttyd -p <span style="color:#ae81ff">1234</span> podman run -it example-container /bin/bash
</span></span></code></pre></div><p>We can also change the container&rsquo;s hostname with <code>-h my-hostname</code>, so
the shell on the live demo will not show the ugly auto-generated id.</p>
<p>And of course we can prepare many containers running on different ports
with various font sizes, configuration, etc.</p>
<p><strong>Note:</strong> each time client connects to the ttyd, new container is created.
This also means when the page having the embedded terminal is refreshed.
Therefore it may be desirable to cleanup all the related containers
after the presentation is done:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>podman container rm --filter ancestor<span style="color:#f92672">=</span>localhost/example-container
</span></span></code></pre></div><hr>
<h2 id="references">References</h2>
<p>Here are links to show you an example of such a presentation. It is from
our DNF5 talk we had at FOSDEM last week:</p>
<ul>
<li><a href="https://github.com/jan-kolarik/dnf5-fosdem">Sources</a></li>
<li><a href="https://jan-kolarik.github.io/dnf5-fosdem">Slides</a></li>
<li><a href="https://video.fosdem.org/2023/K.1.105%20%28La%20Fontaine%29/dnf5.webm">Recording</a></li>
</ul>
]]></content:encoded></item><item><title>DNF5 at FOSDEM</title><link>https://jan-kolarik.github.io/posts/dnf5-fosdem2023/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://jan-kolarik.github.io/posts/dnf5-fosdem2023/</guid><description>Presenting the upcoming Fedora Linux package manager in Brussels</description><content:encoded><![CDATA[<p><img loading="lazy" src="/posts/images/fosdem-logo.png" alt="fosdem-logo"  title="FOSDEM logo"  />
</p>
<p>Last weekend I&rsquo;ve attended FOSDEM 2023 conference with my colleagues from the Red Hat RPM software management team. We gave a talk about the DNF5 package manager which will be the new default in Fedora Linux soon.</p>
<p>It was the first time for me speaking in public at such a huge event and it was really exciting. This whole meetup was very energizing. Lot of different positive vibes from various tracks. I hope I&rsquo;ll make it there again next year.</p>
<p>If you are more interested, you can visit <a href="https://fosdem.org/2023/schedule/event/dnf5/">this</a> link and see a recording of our presentation or any other talk from the conference.</p>
]]></content:encoded></item></channel></rss>